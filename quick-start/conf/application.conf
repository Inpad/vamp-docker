vamp {

  info {
    message = "Hi, I'm Vamp! How are you?"
    timeout = 3 # seconds, response timeout for each component (e.g. Pulse, Router...)
  }

  persistence {
    response-timeout = 5 # seconds

    storage-type: "jdbc" # jdbc, elasticsearch or in-memory
    jdbc.provider.url = "jdbc:h2:./target/vamp-db"
    elasticsearch.url = ${vamp.pulse.elasticsearch.url}
  }

  container-driver {
    type = "docker" # docker or marathon
    url = "http://0.0.0.0:8080"
    response-timeout = 180 # seconds, timeout for container operations
  }

  dictionary.response-timeout = 180 # seconds, timeout for container operations
  rest-api {

    response-timeout = 180 # seconds, HTTP response timeout

    sse {
      keep-alive-timeout = 15 # seconds, timeout after a new line ("\n") will be sent in order keep connection alive
    }
  }

  gateway-driver {
    host = "0.0.0.0" # note: host of cluster servers will have this value (e.g. db.host)
    response-timeout = 180 # seconds, timeout for gateway operations

    zookeeper {
      servers = "0.0.0.0:2181"
    }

    kibana {
      elasticsearch.url = ${vamp.pulse.elasticsearch.url}
      synchronization.period  = 0 # seconds, synchronization will be active only if period is greater than 0
    }
  }

  pulse {
    url = "http://0.0.0.0:8083"
    elasticsearch {
      url = "http://0.0.0.0:9200"
      index {
        name = "vamp-pulse"
        time-format.event = "YYYY-MM-dd"
      }
    }
    response-timeout = 180 # seconds, timeout for pulse operations
  }

  operation {
    synchronization.period = 0 # seconds, synchronization will be active only if period is greater than 0
    sla.period = 0 # seconds, sla monitor period
    escalation.period = 0 # seconds, escalation monitor period

    workflow {
      enabled = false // In order to avoid boot errors, flag should be set to true only for "in-memory" or "elasticsearch" persistence.
      http {
        timeout = 5 # seconds, maximal http request waiting time
      }
      info {
        timeout = 7 // seconds
        component-timeout = 5 // seconds
      }
    }
  }
}

akka {

  loglevel = "DEBUG"

  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
  actor.debug {
    fsm = on
    receive = on
    lifecycle = on
    autoreceive = on
    event-stream = on
  }
}

